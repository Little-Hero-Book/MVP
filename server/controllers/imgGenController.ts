import { Request, Response, NextFunction } from 'express';
import { ServerError } from '../types';
import OpenAI, { toFile } from 'openai';
import fs from 'fs';

const openAIclient = new OpenAI();

// constants
const imgModel = 'gpt-image-1';
const imgOutputSize = '1024x1024';
const imgOutputQuality = 'low';

// this is the main function to be used as middleware
// all other functions are helper functions
export const generateIllustrations = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    // get info about the hero
    const heroName = req.body.name;
    const files = req.files as Express.Multer.File[];
    const heroPhoto = files[0]?.buffer;
    const heroPhotoMimeType = files[0]?.mimetype;

    // generate cartoonified version of the hero for img model reference
    console.log(`Generating Hero image of ${heroName}`);
    let startTime = Date.now();
    const heroImg = await genHeroImg(heroPhoto, heroPhotoMimeType);
    console.log(`Elapsed time: ${(Date.now() - startTime) / 1000} seconds`);
    res.locals.heroImg = heroImg;

    // get info about number of illustrations and their prompts
    // first we'll grab the prompts from the OpenAI Response (kinda hacky but...)
    res.locals.illustrationPrompts = JSON.parse(
      res.locals.openAIResponse
    ).stories[0].illustrationPrompts;
    const illustrationPrompts = [...res.locals.illustrationPrompts];
    const numberOfPages = illustrationPrompts.length;

    // generate actual illustrations
    const illustrations = [] as Buffer[];
    const contextImages = [heroImg];
    const initialPrompt = `These are illustrations for a short picture book of ${numberOfPages} pages.
                           The hero of the story is ${heroName}.
                           The first image is of the hero.
                           
                           The following are the illustration prompts for each page:\n\n${illustrationPrompts.join('\n\n')}`;
    for (let i = 0; i < illustrationPrompts.length; i++) {
      const tempPrompt =
        initialPrompt +
        '\n\n' +
        `Generate the image for page ${i} using the following images as context and the following:
      ${illustrationPrompts[i]}`;
      console.log(`Generating illustration for page ${i}`);
      startTime = Date.now();
      const currentIllustration = await genImg(tempPrompt, contextImages);
      console.log(`Elapsed time: ${(Date.now() - startTime) / 1000} seconds`);
      contextImages.push(currentIllustration);
      illustrations.push(currentIllustration);
    }
    res.locals.illustrations = illustrations;
    fs.writeFileSync('heroImg.png', heroImg);
    dumpBuffersToPngFiles(illustrations); // dump the outputs to disk for testing

    return next();
  } catch (err) {
    const serverError: ServerError = {
      log: `Error generating illustrations: ${err}`,
      status: 500,
      message: { err: 'An error occurred while generating the illustrations' },
    };
    return next(serverError);
  }
};

const genHeroImg = async (photo: Buffer, mimeType: string): Promise<Buffer> => {
  const prompt = `This is a photo of someone who will be a hero in a story book.
                  Please generate a cartoonish version of them that's worthy of
                  a picture book illustration. Make sure the face and hair style
                  matches that of the original photo.`;

  const rsp = await openAIclient.images.edit({
    model: imgModel,
    image: await toFile(photo, null, { type: mimeType }),
    prompt: prompt,
    quality: imgOutputQuality,
    size: imgOutputSize,
  });

  if (!rsp.data || rsp.data.length === 0) {
    throw new ReferenceError('image data not returned for hero image');
  }
  const ImgBase64 = rsp.data[0].b64_json as string;
  const imgBytes = Buffer.from(ImgBase64, 'base64');
  return imgBytes;
};

const genImg = async (
  prompt: string,
  contextImgs: Buffer[]
): Promise<Buffer> => {
  const rsp = await openAIclient.images.edit({
    model: imgModel,
    image: await Promise.all(
      contextImgs.map(
        async (img) => await toFile(img, null, { type: 'image/png' })
      )
    ),
    prompt: prompt,
    quality: imgOutputQuality,
    size: imgOutputSize,
  });
  if (!rsp.data || rsp.data.length === 0) {
    throw new ReferenceError('image data not generated by image model');
  }
  return Buffer.from(rsp.data[0].b64_json as string, 'base64');
};

const dumpBuffersToPngFiles = (imgBuffers: Buffer[]) => {
  imgBuffers.forEach((buff, idx) => fs.writeFileSync(`${idx}.png`, buff));
};

// dry-run test
// const mainTest = async () => {
//   console.log(`OPENAI_API_KEY is: ${process.env.OPENAI_API_KEY}`);

//   console.log('The test should be here somewhere...');

//   // test genHeroImg
//   const fs = await import('fs');
//   const inputImg = fs.readFileSync('./testHero.jpg');
//   const heroImg = await genHeroImg(inputImg, 'image/jpeg');
//   const illustrationPrompts = [
//     'A bright sunny schoolyard. A lively little boy named Owen with messy hair and a big grin is showing off by running laps while other kids watch. Beside him stands Hero, a quieter child with gentle eyes and a calm expression. Hero raises a finger and calmly challenges Owen to a race. The other kids in the background giggle and whisper, clearly doubting Hero.',
//     'A race track drawn in chalk on the playground. Owen zooms ahead with a blur of motion, full of energy, kicking up dust. Hero is far behind, calmly jogging with short, steady steps. The other children cheer from the sidelines. Owen looks over his shoulder confidently, smiling smugly.',
//     'Under a leafy tree by the track, Owen is stretched out on the grass, munching on a snack, then yawning and lying down to nap. Meanwhile, in the distance, Hero keeps walking past him quietly, step by step. A gentle breeze blows leaves across the scene.',
//     'The finish line with a cheering group of kids. Hero is just about to cross it with a calm, focused expression. Owen is behind him, sprinting in a panic, eyes wide. A big banner says "Finish!" and the crowd of kids looks shocked and amazed. Hero wins the race with quiet determination.',
//   ];
//   const req = { body: { name: 'Bob' } } as Partial<Request>;
//   const res = {
//     locals: {
//       heroImg: heroImg,
//       illustrationPrompts: illustrationPrompts,
//       illustrations: [] as Buffer[],
//     },
//   } as Partial<Response>;
//   await generateIllustrations(req, res, () => {});

//   // fs.writeFileSync('testHeroImg.png', heroImg);
// };

// mainTest();
